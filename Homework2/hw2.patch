diff --git a/.config b/.config
index 4c9dd3a..23e85d8 100644
--- a/.config
+++ b/.config
@@ -49,7 +49,7 @@ CONFIG_BUILDTIME_EXTABLE_SORT=y
 CONFIG_INIT_ENV_ARG_LIMIT=32
 CONFIG_CROSS_COMPILE=""
 # CONFIG_COMPILE_TEST is not set
-CONFIG_LOCALVERSION="-group32-hw1"
+CONFIG_LOCALVERSION="-group32-hw2"
 # CONFIG_LOCALVERSION_AUTO is not set
 CONFIG_HAVE_KERNEL_GZIP=y
 CONFIG_HAVE_KERNEL_BZIP2=y
@@ -323,13 +323,15 @@ CONFIG_EFI_PARTITION=y
 # IO Schedulers
 #
 CONFIG_IOSCHED_NOOP=y
+CONFIG_IOSCHED_CLOOK=y
 CONFIG_IOSCHED_DEADLINE=y
 CONFIG_IOSCHED_CFQ=y
 # CONFIG_CFQ_GROUP_IOSCHED is not set
 # CONFIG_DEFAULT_DEADLINE is not set
-CONFIG_DEFAULT_CFQ=y
+# CONFIG_DEFAULT_CFQ is not set
 # CONFIG_DEFAULT_NOOP is not set
-CONFIG_DEFAULT_IOSCHED="cfq"
+CONFIG_DEFAULT_CLOOK=y
+CONFIG_DEFAULT_IOSCHED="clook"
 CONFIG_UNINLINE_SPIN_UNLOCK=y
 CONFIG_ARCH_SUPPORTS_ATOMIC_RMW=y
 CONFIG_MUTEX_SPIN_ON_OWNER=y
diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 421bef9..56128bd 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -12,6 +12,13 @@ config IOSCHED_NOOP
 	  that do their own scheduling and require only minimal assistance from
 	  the kernel.
 
+config IOSCHED_CLOOK
+	tristate "C-LOOK I/O scheduler"
+	default y
+	---help---
+	  The clook scheduler implements an I/O elevator that sorts the incomming
+	  requests so that the write head only ever moves in one direction.
+
 config IOSCHED_DEADLINE
 	tristate "Deadline I/O scheduler"
 	default y
@@ -55,6 +62,9 @@ choice
 	config DEFAULT_NOOP
 		bool "No-op"
 
+	config DEFAULT_CLOOK
+		bool "C-LOPK" if IOSCHED_CLOOK=y
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -62,6 +72,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "clook" if DEFAULT_CLOOK
 
 endmenu
 
diff --git a/block/Makefile b/block/Makefile
index 00ecc97..5bf7e2b 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_BLK_DEV_BSGLIB)	+= bsg-lib.o
 obj-$(CONFIG_BLK_CGROUP)	+= blk-cgroup.o
 obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
+obj-$(CONFIG_IOSCHED_CLOOK) += sstf-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
 
diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
new file mode 100644
index 0000000..9a2606e
--- /dev/null
+++ b/block/sstf-iosched.c
@@ -0,0 +1,163 @@
+/*
+ * elevator clook
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct clook_data {
+	struct list_head queue;
+};
+
+static void clook_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+
+	printk(KERN_DEBUG "CLOOK: merged");
+}
+
+static int clook_dispatch(struct request_queue *q, int force)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+	char readorwrite;					
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		elv_dispatch_add_tail(q, rq);
+		
+		// Print out the dispatch infor
+		readorwrite = (rq_data_dir(rq) & REQ_WRITE) ? 'W' : 'R';
+        printk(KERN_DEBUG "CLOOK: dispatch %c %lu\n", readorwrite, (unsigned int) blk_rq_pos(rq));
+
+		return 1;
+	}
+	return 0;
+}
+
+static void clook_add_request(struct request_queue *q, struct request *rq)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+	struct list_head *iter = NULL;
+	int min_head = 0;
+
+	/*This works as an insertion sort. Request is put in the correct place based on the physical sector location*/
+
+	list_for_each(iter, &nd->queue) //list_for_each acts like a for loop and iterates through the nd->queue
+	{
+		if (!min_head) {
+			// Find the minimum head of the list
+			if (iter->next == iter) {
+				// Handle base case of one element
+				min_head = 1;
+			} else if (blk_rq_pos(list_entry(iter, struct request, queuelist)) >
+			           blk_rq_pos(list_entry(iter->next, struct request, queuelist))) {
+				// Found the beginning of the list
+				min_head = 1;
+			}
+		} else if(blk_rq_pos(rq) < blk_rq_pos(list_entry(iter, struct request, queuelist))) {
+			// Now that we are at the start of the list we can add the element in
+			// If the request is greater than the iterator, it means we have hit the right spot so we break out of the loop
+			break;
+		}
+		//printk(KERN_DEBUG "CLOOK: test %lu\n", blk_rq_pos(rq));
+	}
+	printk(KERN_DEBUG "CLOOK: add %lu\n", (unsigned int) blk_rq_pos(rq));
+
+	//Now that we have the right position, we want to insert the request into the queue
+	list_add_tail(&rq->queuelist, iter);
+}
+
+static struct request *
+clook_former_request(struct request_queue *q, struct request *rq)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+clook_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int clook_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct clook_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+
+	printk(KERN_DEBUG "CLOOK: initialized queue\n");
+
+	return 0;
+}
+
+static void clook_exit_queue(struct elevator_queue *e)
+{
+	struct clook_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+
+	printk(KERN_DEBUG "CLOOK: exited queue");
+}
+
+static struct elevator_type elevator_clook = {
+	.ops = {
+		.elevator_merge_req_fn		= clook_merged_requests,
+		.elevator_dispatch_fn		= clook_dispatch,
+		.elevator_add_req_fn		= clook_add_request,
+		.elevator_former_req_fn		= clook_former_request,
+		.elevator_latter_req_fn		= clook_latter_request,
+		.elevator_init_fn		= clook_init_queue,
+		.elevator_exit_fn		= clook_exit_queue,
+	},
+	.elevator_name = "clook",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init clook_init(void)
+{
+	return elv_register(&elevator_clook);
+}
+
+static void __exit clook_exit(void)
+{
+	elv_unregister(&elevator_clook);
+}
+
+module_init(clook_init);
+module_exit(clook_exit);
+
+
+MODULE_AUTHOR("Brennan Douglas, Nicholas Giles, Cooper Hutchins");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("CLook IO scheduler");
